<h1>Search Results: <%= params.query %></h1>
<%
    local paginator = Projects:paginated(
        [[WHERE ispublished AND NOT EXISTS(
            SELECT 1 FROM deleted_users WHERE
            username = active_projects.username LIMIT 1)
        AND (projectname ILIKE ? OR notes ILIKE ?)]],
        '%' .. params.query .. '%',
        '%' .. params.query .. '%',
        { per_page = 15 }
    )

    local projects = new_component('grid')

    projects.data.items = {}
    projects.data.total_pages = paginator:num_pages()
    projects.data.page_number = 1
    projects.data.class = 'projects'
    projects.data.title = 'Projects'
    projects.data.item_type = 'project'
    projects.data.query = 'explore_projects'
    projects.data.search_term = params.query

    render(
        'views.components.component',
        {
            path = 'grid',
            component = projects
        }
    )

    paginator = Collections:paginated(
        [[JOIN active_users ON
            (active_users.id = collections.creator_id)
        WHERE published
        AND (name ILIKE ? OR description ILIKE ?)]],
        '%' .. params.query .. '%',
        '%' .. params.query .. '%',
        { per_page = 15 }
    )

    local collections = new_component('grid')

    collections.data.items = {}
    collections.data.total_pages = paginator:num_pages()
    collections.data.page_number = 1
    collections.data.class = 'collections'
    collections.data.title = 'Collections'
    collections.data.item_type = 'collection'
    collections.data.query = 'explore_collections'
    collections.data.search_term = params.query

    render(
        'views.components.component',
        {
            path = 'grid',
            component = collections
        }
    )

    query = db.interpolate_query(
        'WHERE username ILIKE ?',
        '%' .. params.query .. '%'
    )

    if reviewer_controls then
        query = query ..
            db.interpolate_query(
                'OR email ILIKE ?',
                '%' .. params.query .. '%'
            )
    end

    paginator = Users:paginated(query, { per_page = 51 })

    local users = new_component('grid')

    users.data.items = {}
    users.data.total_pages = paginator:num_pages()
    users.data.page_number = 1
    users.data.class = 'user_results'
    users.data.title = 'Users'
    users.data.item_type = 'user'
    users.data.query = 'explore_users'
    users.data.search_term = params.query
    users.data.items_per_row = 3
    users.data.per_page = 51

    render(
        'views.components.component',
        {
            path = 'grid',
            component = users
        }
    )
%>
